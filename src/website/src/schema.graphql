type Attribute {
  name: String!
  value: String!
}

input AttributeInput {
  name: String!
  value: String!
}

input Filter {
  active: Boolean
  discontinued: Boolean
  search: String
  onSale: Boolean
  stockStatus: ProductFilterStockStatus!
  priceFrom: Float
  priceTo: Float
  sku: String
  sort: ProductFilterSort
}

type Image {
  alt: String!
  file: String!
}

input ImageInput {
  alt: String!
}

type Mutation {
  status: String!
  license: String!
  login(email: String!): String!
  createStore(data: StoreInput!): [StoreRecord!]!
  createProduct(data: ProductInput!): [ProductRecord!]!
  updateProduct(id: ID!, data: ProductInput!, images: [Upload!], deleteImageIndex: Int): ProductRecord
  deleteProduct(id: ID!): ProductRecord
}

"""
Information about pagination in a connection
"""
type PageInfo {
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

enum ProductFilterSort {
  PRICE_MIN_TO_MAX
  PRICE_MAX_TO_MIN
  STOCK_HIGHEST
  STOCK_LOWEST
}

enum ProductFilterStockStatus {
  AVAILABLE
}

input ProductInput {
  name: String! = ""
  description: String! = ""
  slug: String! = ""
  metaTitle: String! = ""
  metaDescription: String! = ""
  regularPrice: Float! = 0.0
  salePrice: Float! = 0.0
  sku: String! = ""
  stockQuantity: Int! = 0
  weight: Float! = 0.0
  stockTracking: Boolean! = false
  stockPreorder: Boolean! = false
  stockBackorder: Boolean! = false
  discontinued: Boolean! = false
  enabled: Boolean! = false
  attributes: [AttributeInput!]! = []
  variants: [VariantInput!]! = []
  tags: [String!]! = []
  position: Int! = 0
  images: [ImageInput!]! = []
}

type ProductRecord {
  name: String!
  description: String!
  slug: String!
  metaTitle: String!
  metaDescription: String!
  regularPrice: Float!
  salePrice: Float!
  sku: String!
  stockQuantity: Int!
  weight: Float!
  stockTracking: Boolean!
  stockPreorder: Boolean!
  stockBackorder: Boolean!
  discontinued: Boolean!
  enabled: Boolean!
  attributes: [Attribute!]!
  variants: [Variant!]!
  tags: [String!]!
  position: Int!
  images: [Image!]!
  dateStockExpected: String!
  dateSaleFrom: String!
  dateSaleTo: String!
  id: String!
}

type ProductRecordConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ProductRecordEdge!]!
  """
  A list of nodes.
  """
  nodes: [ProductRecord!]!
}

"""
An edge in a connection.
"""
type ProductRecordEdge {
  """
  The item at the end of the edge
  """
  node: ProductRecord!
  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Query {
  status: String!
  license: String!
  stores: String!
  getProduct(id: ID!): ProductRecord!
  getProducts(after: String, before: String, first: Int, last: Int, filter: Filter): ProductRecordConnection!
}

input StoreInput {
  name: String! = "Untitled"
}

type StoreRecord {
  name: String!
  users: String!
  id: String!
}

scalar Upload

type Variant {
  sku: String!
  price: Float!
  stockQuantity: Int!
  weight: Float!
  options: String!
}

input VariantInput {
  sku: String!
  price: Float!
  stockQuantity: Int!
  weight: Float!
}

